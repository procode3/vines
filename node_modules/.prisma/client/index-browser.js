
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.5.2
 * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
 */
Prisma.prismaVersion = {
  client: "5.5.2",
  engine: "aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  type: 'type',
  orderId: 'orderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderType: 'orderType',
  writerId: 'writerId',
  name: 'name',
  topic: 'topic',
  description: 'description',
  subject: 'subject',
  pages: 'pages',
  words: 'words',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clientDeadline: 'clientDeadline',
  writerDeadline: 'writerDeadline',
  price: 'price',
  educationLevel: 'educationLevel',
  status: 'status',
  writerRating: 'writerRating',
  userId: 'userId',
  assignedById: 'assignedById',
  clientId: 'clientId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  emailVerified: 'emailVerified',
  image: 'image',
  userType: 'userType'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.FileType = exports.$Enums.FileType = {
  ORDER_FILE: 'ORDER_FILE',
  SUBMISSION_FILE: 'SUBMISSION_FILE'
};

exports.Order_type = exports.$Enums.Order_type = {
  ESSAY: 'ESSAY',
  RESEARCH_PAPER: 'RESEARCH_PAPER',
  TERM_PAPER: 'TERM_PAPER',
  COURSEWORK: 'COURSEWORK',
  CASE_STUDY: 'CASE_STUDY',
  BOOK_REVIEW: 'BOOK_REVIEW',
  ARTICLE_REVIEW: 'ARTICLE_REVIEW',
  ANNOTATED_BIBLIOGRAPHY: 'ANNOTATED_BIBLIOGRAPHY',
  BOOK_REPORT: 'BOOK_REPORT',
  MOVIE_REVIEW: 'MOVIE_REVIEW',
  MOVIE_CRITIQUE: 'MOVIE_CRITIQUE',
  ARTICLE: 'ARTICLE',
  ARTICLE_CRITIQUE: 'ARTICLE_CRITIQUE',
  REACTION_PAPER: 'REACTION_PAPER',
  LETTER: 'LETTER',
  REFLECTION_PAPER: 'REFLECTION_PAPER',
  LAB_REPORT: 'LAB_REPORT',
  LAB_WORK: 'LAB_WORK',
  SPEECH: 'SPEECH',
  PRESENTATION: 'PRESENTATION',
  POWERPOINT_PRESENTATION: 'POWERPOINT_PRESENTATION',
  MATH_PROBLEM: 'MATH_PROBLEM',
  STATISTICS_PROJECT: 'STATISTICS_PROJECT',
  RESEARCH_SUMMARY: 'RESEARCH_SUMMARY',
  THESIS: 'THESIS',
  DISSERTATION: 'DISSERTATION',
  THESIS_PROPOSAL: 'THESIS_PROPOSAL',
  DISSERTATION_PROPOSAL: 'DISSERTATION_PROPOSAL',
  RESEARCH_PROPOSAL: 'RESEARCH_PROPOSAL',
  ADMISSION_ESSAY: 'ADMISSION_ESSAY',
  SCHOLARSHIP_ESSAY: 'SCHOLARSHIP_ESSAY',
  PERSONAL_STATEMENT: 'PERSONAL_STATEMENT',
  EDITING: 'EDITING',
  PROOFREADING: 'PROOFREADING',
  REWRITING: 'REWRITING',
  RESUME: 'RESUME',
  CV: 'CV',
  COVER_LETTER: 'COVER_LETTER',
  OTHER: 'OTHER'
};

exports.Subject = exports.$Enums.Subject = {
  MATH: 'MATH',
  SCIENCE: 'SCIENCE',
  ENGLISH: 'ENGLISH',
  BIOLOGY: 'BIOLOGY',
  HISTORY: 'HISTORY',
  GEOGRAPHY: 'GEOGRAPHY',
  CHEMISTRY: 'CHEMISTRY',
  PHYSICS: 'PHYSICS',
  LITERATURE: 'LITERATURE',
  ECONOMICS: 'ECONOMICS',
  ENGINEERING: 'ENGINEERING',
  COMPUTER_SCIENCE: 'COMPUTER_SCIENCE',
  BUSINESS: 'BUSINESS',
  LAW: 'LAW',
  PHILOSOPHY: 'PHILOSOPHY',
  PSYCHOLOGY: 'PSYCHOLOGY',
  POLITICAL_SCIENCE: 'POLITICAL_SCIENCE',
  SOCIOLOGY: 'SOCIOLOGY',
  STATISTICS: 'STATISTICS',
  ACCOUNTING: 'ACCOUNTING',
  PROGRAMMING: 'PROGRAMMING',
  OTHER: 'OTHER',
  SOCIAL_STUDIES: 'SOCIAL_STUDIES',
  SOCIAL_SCIENCE: 'SOCIAL_SCIENCE'
};

exports.Education_level = exports.$Enums.Education_level = {
  HIGH_SCHOOL: 'HIGH_SCHOOL',
  UNDERGRADUATE: 'UNDERGRADUATE',
  COLLEGE: 'COLLEGE',
  MASTERS: 'MASTERS',
  PHD: 'PHD',
  OTHER: 'OTHER'
};

exports.Order_status = exports.$Enums.Order_status = {
  NEW: 'NEW',
  AVAILABLE: 'AVAILABLE',
  UNCONFIRMED: 'UNCONFIRMED',
  INPROGRESS: 'INPROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REVISION: 'REVISION',
  DISPUTE: 'DISPUTE',
  REFUNDED: 'REFUNDED',
  EDITING: 'EDITING'
};

exports.User_type = exports.$Enums.User_type = {
  WRITER: 'WRITER',
  CLIENT: 'CLIENT',
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  File: 'File',
  Order: 'Order',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  submission: 'submission'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
